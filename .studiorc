#!/bin/bash

# Source ci-studio-common helpers
hab pkg install chef/ci-studio-common
source "$(hab pkg path chef/ci-studio-common)/bin/studio-common"

# Welcome Message
getting_started <<GETTING_STARTED

Welcome to the Habitat-based development environment for the Go scaffolding wrapper!

  $(yellow "=== Getting Started ===")

To build a scaffolding-go package run:

  # build

To test the latest scaffolding-go wrapper:

  $(green "* Build a simple Go application:")

    # build_simple_go_app
    # go-app

  $(green "* Build a multi-binary Go application:")

    # build_multi_binary_go_app

    1) Run cli binary
        # cli

    2) Serve app binary. (Recommended to start with hab-svc commands)
        # serve-app

For faster development cycles use the following helper to build and test a new scaffolding-go package:

  # build_and_test_all

GETTING_STARTED

# List of functions with a 'build and test' pattern that will be called from `build_and_test_all' func
# Create new test cases and add them to the list to automatically run them
BUILD_AND_TEST_FUNC_LIST=(
  build_and_test_simple_go_app
  build_and_test_make_binary_app
  build_and_test_single_binary_app
  build_and_test_multi_binary_app
)

# build_and_test_all will build the scaffolding-go and then test it by building a number of
# Go apps that are defined inside the environment variable 'BUILD_AND_TEST_FUNC_LIST'
function build_and_test_all(){
  local rc
  yellow "* Building $HAB_ORIGIN/scaffolding-go package.\\n"
  pushd /src >/dev/null
    build
    rc=$?
  popd >/dev/null

  # Verify the exit code of the package above built correctly
  if [[ $rc != 0 ]]; then
    return $rc;
  fi

  for func in "${BUILD_AND_TEST_FUNC_LIST[@]}"; do
    $func
    rc=$?
    if [[ $rc != 0 ]]; then
      echo -e "$(red "ERROR:") Unable to successfully run function: '$func'. (exitcode: $rc)"
      return $rc;
    fi
  done
}

# verify_or_install_scaffolding_go verifies if the wrapper scaffolding-go is installed, if not, it builds it and installs it
function verify_or_install_scaffolding_go() {
  local pkg_path
  pkg_path=$(hab pkg path "$HAB_ORIGIN/scaffolding-go" 2>/dev/null)
  if [[ "$pkg_path" == "" ]]; then
    echo -e "$(yellow "WARN:") Package $HAB_ORIGIN/scaffolding-go not found, building a fresh one."
    build
    pkg_path=$(hab pkg path "$HAB_ORIGIN/scaffolding-go" 2>/dev/null)
  fi
  echo "$pkg_path"
}
